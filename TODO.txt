
- Decide if the format will allow for geometry to have children.
    - Houdini does not allow this (via subnets), but there are still
      node IO relationships which do the same thing.

- Abstract the logic which determines if a node should be broken up into two,
  and then putting the transform/geo onto different ones.

  âˆš First step is to create core "node" objects, which hold onto the app-specific
    data. These retain the original heirarchy as well.
  x Next is to determine if they should be broken up at all.
  - Then decide the final paths on disk for saving.
  - Next, couldalculate transforms, and/or export geometry.

  - If we shift our perception of this to be a scene graph in memory that is
    then interpreted, instead of functionally loading/saving to disk as we
    traverse directories, everything may get a ton easier to deal with.

- Houdini importer could/should colours nodes with shears stuffed into
  pre-transform.

- Houdini exporter's "local" transform does not include shears.

- How would we represent shaders, or atleast shader assignments? How could this
  data survive the round-trip from Houdini to/from Maya?
